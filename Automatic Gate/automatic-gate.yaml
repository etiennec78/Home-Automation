blueprint:
  name: Automatic Gate
  domain: automation
  author: etiennec78
  description: |-
    # Automatic Gate ‚õ©Ô∏è

    ## Description üìù
    **Modular** and **secure** gate automation that **opens your gate** upon leaving or arriving
    Makes managing your gate while driving easier : don't ever touch your screen or remote again
    Have your gate greet you when you arrive home and be ready for you
    Customize the options to tailor the system to your exact needs

    ## Key Features üåü
    * **Automatic Opening**: Your gate will open automatically when you drive home. No need to press any buttons ! üè†
    * **Smart Navigation**: Directly open the gate when leaving home, or launch an itinerary when starting from outside üöÄ
    * **Multi-User Support**: Manages up to 10 drivers simultaneously üöó
    * **Collision Prevention**: Ensures the gate doesn't close on anyone arriving or leaving at the same time üöß
    * **Security & Reliability**:
      * Precise Waze and ETA calculations to have your gate fully open exactly when you arrive home üéØ
      * Real-time position tracking to adjust timing for traffic or if you pass by without entering üìç
      * Car status monitoring to cancel everything if you leave your car ‚úã
      * Built-in timeouts in case of an internet loss ‚è≥
      * Maximum entry and leaving time before auto-closing ‚åõ
      * Notification alerts at each decision of the automation üö®
      * Manual actions prioritized over the automation, letting you control your gate even while the automation is running ‚úçÔ∏è
    * **Customizable Settings**:
      * Auto-close with iBeacon üì°
      * Adjustable notifications üí¨
      * Customizable security options üîí
      * Customizable gate operation timings üõ†Ô∏è
      * Customizable travel time refresh rate üîÅ
      * Multiple gates supported by reusing the blueprint ‚ôªÔ∏è

    ## More info ‚ÑπÔ∏è
    * Version : 1.1.0
    * Set up sensors : [click here](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md)
    * Flowchart : [click here](https://miro.com/app/board/uXjVMpH4Tno=/)
    * Github : [click here](https://github.com/etiennec78/Home-Automation/tree/master/Automatic%20Gate)
    * Discord : etiennec78
    [!["Buy Me A Coffee"](https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png)](https://www.buymeacoffee.com/etiennec78)
  homeassistant:
    min_version: 2024.6.0
  input:
    essential_sensors:
      name: Essential sensors
      icon: "mdi:gate"
      collapsed: true
      input:
        gate:
          name: ‚õ©Ô∏è Gate
          description: The **switch** or **cover** which controls your **[gate](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#gate-%EF%B8%8F)**
          selector:
            entity:
              filter:
                domain:
                  - switch
                  - cover
        gate_location:
          name: üìç Gate location
          description: The zone where your gate is located, to detect whether you are leaving or arriving
          default: "zone.home"
          selector:
            entity:
              filter:
                domain: zone
        lead_time:
          name: üïì Lead time
          description: The **lead time** to open the gate **before your arrival** (take your gate movement time & a margin into account)
          default: 75
          selector:
            number:
              min: 10
              max: 300
              unit_of_measurement: seconds
        eta_sensor:
          name: üìÖ Planned time of opening
          description: An empty **[input datetime](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#planned-opening-) helper** which will be used to set an **ETA** and plan the **opening of your gate** (see wiki)
          selector:
            entity:
              filter:
                domain: input_datetime

    per_person_sensors:
      name: Per person sensors
      icon: mdi:account-multiple
      collapsed: true
      description: |-
        ‚ö†Ô∏è Please enter the same amount of entires in each input, and place users in the same order
      input:
        persons:
          name: üë§ Tracked users
          description: |-
            Each **user** which should be **[tracked](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#gps-location-trackers-)** for **position updates**
            *Notes :*
            *‚ö†Ô∏è Use high precision while driving in your ETA zone or you could time out*
            *If your tracker has report latency (wifi/ble), and you plug Android Auto just after leaving, your gate could open thinking you are still there*
          selector:
            entity:
              multiple: true
              filter:
                domain:
                  - device_tracker
                  - person
        driving_sensors:
          name: üöó Driving sensors
          description: Each **[driving sensor](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#driving-sensors-)** which should trigger the automation
          selector:
            entity:
              multiple: true
              filter:
                domain: binary_sensor
        travel_time_sensors:
          name: ‚úàÔ∏è Travel time sensors
          description: |-
            Each **[travel time sensor](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#travel-time-sensors-%EF%B8%8F)** monitoring each user **time left before arrival**
            *‚ö†Ô∏è Please set a [custom polling interval](https://www.home-assistant.io/integrations/waze_travel_time/#defining-a-custom-polling-interval)*
          selector:
            entity:
              multiple: true
              filter:
                domain: sensor
                device_class: duration
        proximity_sensors:
          name: üìè Proximity sensors
          description: Each **[proximity sensor](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#proximity-sensors-)** from the proximity integration to calculate user distance from your gate
          selector:
            entity:
              multiple: true
              filter:
                integration: proximity
                domain: sensor
                device_class: distance
        notify_devices:
          name: üí¨ Notify services
          description: Each **[service](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#notify-services-)** of **device to notify** (Find the service ids by going into [Developer tools > Services tab](https://my.home-assistant.io/redirect/developer_states/) > searching for "notify.")
          selector:
            text:
              multiple: true
              prefix: notify.mobile_app_
        itinerary_sensors:
          name: üó∫Ô∏è Itinerary sensors
          description: Each empty **[itinerary input text](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#itinerary-sensors-%EF%B8%8F)** helper to store each user **itinerary state**
          selector:
            entity:
              multiple: true
              filter:
                domain: input_text

    automation_settings:
      name: Automation settings
      icon: mdi:cog
      collapsed: true
      input:
        travel_time_rate:
          name: üîÑ Travel time refresh rate
          description: |-
            Calculate the Travel time & ETA

              - **Continuously** during the whole itinerary (custom refresh interval while away)
              - Only while the vehicle is **near home**
              - Only **once** when the vehicle gets near home

            **"Continuously"** can use more Waze/Maps credits, but can be useful to display a precise ETA on your dashboard when far from your destination
            **"While near home"** allows to monitor if you drive near your gate without entering to abort the itinerary, or if there are traffic jams near home to open later (recommended)
            **"Only once"** uses the less amount of credits, but could trigger if you come near your gate without entering (not recommended)
          default: While near home
          selector:
            select:
              options:
                - Continuously
                - While near home
                - Once when near home
        continuously_refresh_interval:
          name: ‚è≥ Continuously refresh interval
          description: Your travel time **refresh interval** while away. Only active with a refresh rate set to **"Continuously"**
          default: 5
          selector:
            number:
              min: 1
              max: 60
              unit_of_measurement: minutes
        eta_zone:
          name: üöÄ ETA planning zone
          description: |-
            At which **distance** from gate should your vehicle start planning its **Estimated Time of Arrival** to **open your gate** ?
          default: 1000
          selector:
            number:
              min: 200
              max: 5000
              unit_of_measurement: meters
        activation_zone:
          name: üîí Gate activation zone
          description: At which **maximal distance** should your vehicle be able to automatically **open your gate** ? It will automatically **close** if you **leave** this zone
          default: 1200
          selector:
            number:
              min: 300
              max: 5000
              unit_of_measurement: meters
        automatic_closing:
          name: üîí Automatic closing behavior
          description: |-
            Gate automatic **closing** behavior

              - **Automatically close** your gate after you reach your destination (or leave if ble sensors are set)
              - **Only close for safety mechanism**, in case you don't want your gate to close automatically but want to keep safety features
              - **Never close** at all, in case your gate doesn't support closing. This will disable almost all safety features
          default: "on"
          selector:
            select:
              options:
                - label: Automatically close
                  value: "on"
                - label: Only close for safety mechanism
                  value: "only-safety"
                - label: Never close
                  value: "off"
        safety_delay:
          name: üîí Auto-close safety delay
          description: The time the gate will wait before **automatically closing** if your gate is open but you still haven't left or arrived
          default: 5
          selector:
            number:
              min: 2
              max: 30
              unit_of_measurement: minutes
        timeout_delay:
          name: ‚åõ Timeout delay
          description: |-
            The time the automation will wait before **stopping** if your phone **times out** and doesn't send new position updates, while being in the activation zone
            *Note : If your position provider doesn't let you use a high accuracy mode (like iOS), please increase this value*
          default: 2
          selector:
            number:
              min: 0.5
              max: 30
              unit_of_measurement: minutes
        auto_close_arrival_delay:
          name: üì¨ Auto-close delay after arrival
          description: |-
            The time the gate will wait before **automatically closing** after you arrive home and you have left your car
            *Note : Can be useful if you plan to collect mail or put away groceries after arriving*
          default: 0
          selector:
            number:
              min: 0
              max: 30
              unit_of_measurement: minutes

    notification_settings:
      name: Notification settings
      icon: mdi:bell
      collapsed: true
      description: |-
        Notification settings to translate texts or change notification behavior
      input:
        opening_notification:
          name: üëê Opening notification
          description: |-
            Should the automation notify you when your gate opens?
            *Note : If your gate already notifies you like my esphome firmware, you can turn this off*
          default: true
          selector:
            boolean:
        itinerary_update_title:
          name: üìÉ‚ÑπÔ∏è Itinerary status update title
          description: The **title** displayed on the notification you will receive when the **status of your itinerary** changes
          default: "Itinerary ‚ÑπÔ∏è"
          selector:
            text:
        itinerary_canceled_title:
          name: üìÉ‚ùå Itinerary canceled title
          description: The **title** displayed on the notification you will receive when your **itinerary gets canceled**
          default: "Itinerary canceled ‚ùå"
          selector:
            text:
        gate_opening_title:
          name: üìÉüîì Gate opening notification title
          description: The **title** displayed on the notification you will receive when your **gate is opening**
          default: "Gate opening üîì"
          selector:
            text:
        gate_closing_title:
          name: üìÉüîí Gate closing notification title
          description: The **title** displayed on the notification you will receive when your **gate is closing**
          default: "Gate closing üîí"
          selector:
            text:
        awaiting_title:
          name: üìÉüí§ Gate awaiting user notification title
          description: |-
            The **title** displayed on the notification you will receive when your gate is **awaiting another user**
            *Note : {{awaiting_persons}} will be replaced by the list of the users being awaited*
          default: "Gate awaiting {{ awaiting_persons }} üí§"
          selector:
            text:
        itinerary_started_message:
          name: üí¨üöÄ Itinerary started notification
          description: The **content** of the notification you will receive when your **itinerary starts**
          default: "Your itinerary has been started"
          selector:
            text:
        user_arrival_message:
          name: üí¨üèÅ User arrival notification
          description: The **content** of the notification you will receive when you **arrive at your destination**
          default: "You have arrived at your destination"
          selector:
            text:
              multiline: true
        automatic_opening_message:
          name: üí¨üîì Automatic opening notification
          description: The **content** of the notification you will receive when your gate is **automatically opening**
          default: "Automatic opening of the gate"
          selector:
            text:
              multiline: true
        automatic_closing_message:
          name: üí¨üîí Automatic closing notification
          description: The **content** of the notification you will receive when your gate is **automatically closing**
          default: "Automatic closing of the gate"
          selector:
            text:
              multiline: true
        awaiting_message:
          name: üí¨üí§ Gate awaiting user notification
          description: The **content** of the notification you will receive when your gate is **awaiting another user**
          default: "The gate will close once all users have entered/exited"
          selector:
            text:
              multiline: true
        vehicle_left_message:
          name: üí¨‚ö†Ô∏è Vehicle left notification
          description: The **content** of the notification you will receive if you **leave your vehicle**
          default: "You have left your vehicle"
          selector:
            text:
              multiline: true
        did_not_leave_message:
          name: üí¨‚ö†Ô∏è User did not leave notification
          description: |-
            The **content** of the notification you will receive if you **don't leave in time**
            *Note : {{safety_delay}} will be replaced by your auto-close delay you have set above*
          default: "The vehicle did not leave in less than {{ safety_delay }} minutes"
          selector:
            text:
              multiline: true
        did_not_arrive_message:
          name: üí¨‚ö†Ô∏è User did not arrive notification
          description: |-
            The **content** of the notification you will receive if you **don't arrive in time**
            *Note : {{safety_delay}} will be replaced by your auto-close delay you have set above*
          default: "The vehicle did not arrive in less than {{ safety_delay }} minutes"
          selector:
            text:
              multiline: true
        timed_out_message:
          name: üí¨‚ö†Ô∏è Timed out notification
          description: |-
            The **content** of the notification you will receive if you **time out**
            *Note : {{timeout_delay}} will be replaced by your auto-close delay you have set above*
          default: "Your position has not been updated in {{ timeout_delay }} minutes"
          selector:
            text:
              multiline: true
        vehicle_away_message:
          name: üí¨‚ö†Ô∏è Vehicle not in activation zone notification
          description: The **content** of the notification you will receive if **you are not in your activation zone**
          default: "The vehicle is not in the activation zone"
          selector:
            text:
              multiline: true
        travel_time_did_not_respond:
          name: üí¨‚ö†Ô∏è Travel time integration did not respond
          description: The **content** of the notification you will receive if your **travel time integraton did not respond** during the itinerary
          default: "Your travel time integration did not respond during your itinerary"
        not_home_message:
          name: üí¨‚ö†Ô∏è Not home notification
          description: The **content** of the notification you will receive if your **iBeacon or WiFi tracker** did not report you at home
          default: "You were not detected at home"

    optional_sensors:
      name: Optional sensors
      icon: mdi:dots-horizontal-circle-outline
      collapsed: true
      input:
        ble_entities:
          name: üîé iBeacon tracker entities
          description: |-
            Each **[BLE rssi tracker entity](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#bluetooth-entities-)** to monitor your distance from the gate while leaving, to close it when you're out of reach
            Needs [bluetooth transmitters](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#bluetooth-transmitter-) set on companion apps
            *Note : Let empty if no ble*
          default: []
          selector:
            entity:
              multiple: true
              filter:
                domain: sensor
                device_class: signal_strength
        ble_scanner_switch:
          name: ‚èØÔ∏è iBeacon scanner activator switch
          description: |-
            The **[switch](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#bluetooth-scanner-switch-)** you want to use to turn on and off your **iBeacon scanner** when a vehicle is leaving
            *Note : Let empty if no ble / want to always keep iBeacon running*
          default: ""
          selector:
            entity:
              filter:
                domain: switch
        ble_transmitter_phone_control:
          name: üìµ Phone iBeacon control
          description: |-
            Should your **phone iBeacon transmitter** automatically be turned **off** while not being used by the gate ?
            *Note : Only necessary if ble tracker entities are set*
            *Please manually set your [iBeacon transmitter](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md#bluetooth-transmitter-) to on in companion settings if disabled*
          default: true
          selector:
            boolean:
        only_open_near_iBeacon:
          name: Only open while near iBeacon üè†
          description: |-
            Should your gate only open if you are reachable from your iBeacon ?
            *Note : Useful to prevent your gate from opening if you are parked outside in front of your house*
          default: false
          selector:
            boolean:
        wifi_devices:
          name: WiFi devices üè†
          description: |-
            WiFi entities to make your gate only open if you are connected to your WiFi network
            *Notes :*
            *Useful to prevent your gate from opening if you are parked outside in front of your house*
            *WiFi can be slow to report new states*
          default: []
          selector:
            entity:
              multiple: true
              filter:
                domain: device_tracker

variables:
  gate: !input gate
  gate_location: !input gate_location
  lead_time: !input lead_time
  safety_delay: !input safety_delay
  timeout_delay: !input timeout_delay
  opening_notification: !input opening_notification
  persons: !input persons
  driving_sensors: !input driving_sensors
  travel_time_sensors: !input travel_time_sensors
  proximity_sensors: !input proximity_sensors
  notify_devices: !input notify_devices
  itinerary_sensors: !input itinerary_sensors
  eta_sensor: !input eta_sensor
  travel_time_rate: !input travel_time_rate
  continuously_refresh_interval: !input continuously_refresh_interval
  eta_zone: !input eta_zone
  activation_zone: !input activation_zone
  ble_entities: !input ble_entities
  ble_scanner_switch: !input ble_scanner_switch
  ble_transmitter_phone_control: !input ble_transmitter_phone_control
  automatic_closing: !input automatic_closing
  only_open_near_iBeacon: !input only_open_near_iBeacon
  wifi_devices: !input wifi_devices

trigger:
  # Triggers when one of the users connect to a vehicle (if you have more than one, make a custom vehcle sensor : example in sensors.md)
  - platform: state
    entity_id: !input driving_sensors
    from: "off"
    to: "on"

condition: []

action:
  # Store the list index of the user who triggered the automation, and extract the recurrent sensors at this index of the list
  - variables:
      idx: "{{ driving_sensors.index(trigger.entity_id) }}"
      person: "{{ persons[idx] }}"
      driving_sensor: "{{ trigger.entity_id }}"
      travel_time_sensor: "{{ travel_time_sensors[idx] }}"
      notify_device: "{{ 'notify.mobile_app_'+notify_devices[idx] }}"
      itinerary_sensor: "{{ itinerary_sensors[idx] }}"

  # If the user is currently at the gate location
  - if:
      - condition: template
        value_template: "{{ is_state(person, [state_attr(gate_location, 'friendly_name'), states[gate_location].object_id]) }}"
    then:
      #####################
      # OPEN GATE ON EXIT #
      #####################

      # If iBeacon automatic closing is enabled for this user
      - if:
        - condition: template
          value_template: "{{ (ble_entities | length) - 1 >= idx }}"
        then:
          # Activate the BLE transmitter on the user's phone to close the gate when he has left, only if ble_transmitter_phone_control is turned on
          - if:
              - condition: template
                value_template: !input ble_transmitter_phone_control
            then:
              - service: "{{ notify_device }}"
                data:
                  message: command_ble_transmitter
                  data:
                    command: turn_on
          # Activate the BLE scanner from the ESP32 connected to the gate, only if a switch has been set
          - if:
            - condition: template
              value_template: "{{ ble_scanner_switch != '' }}"
            then:
              - service: switch.turn_on
                target:
                  entity_id: "{{ ble_scanner_switch }}"
      # If the user chose to wait for iBeacon or WiFi before opening to ensure his vehicle was not parked outside
      - if:
        - condition: template
          value_template: "{{ only_open_near_iBeacon and (ble_entities | length) - 1 >= idx or (wifi_devices | length) - 1 >= idx }}"
        # Then wait for iBeacon or WiFi
        then:
          - wait_template: "{{ not is_state(ble_entities[idx], 'unknown') or is_state(wifi_devices[idx], 'home') }}"
            continue_on_timeout: true
            timeout: 10
          # If the timeout wasn't reached
          - if:
            - condition: template
              value_template: "{{ wait.remaining != 0 }}"
            then:
              # Notify the user that his itinerary has been canceled because he was not home
              - service: "{{ notify_device }}"
                data:
                  title: !input itinerary_canceled_title
                  message: !input not_home_message
                  data:
                    car_ui: true
                    notification_icon: mdi:alert-circle
                    channel: Itinerary status
                    importance: high
                    push:
                      sound:
                        name: "default"
                        critical: 1
                    tag: itinerary-status
                    timeout: 300
              - stop: Not home
      # Set the user itinerary text variable to "leaving"
      - service: input_text.set_value
        target:
          entity_id: "{{ itinerary_sensor }}"
        data:
          value: leaving
      # If the gate is closing/closed
      - if:
          - condition: template
            value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
        # Then open it because the user is leaving
        then:
          # Select the right service by checking the first letter of the gate id
          - choose:
            - conditions:
                - condition: template
                  value_template: "{{ states[gate].domain == 'switch' }}"
              sequence:
                - service: switch.turn_on
                  target:
                    entity_id: !input gate
            - conditions:
                - condition: template
                  value_template: "{{ states[gate].domain == 'cover' }}"
              sequence:
                - service: cover.open_cover
                  target:
                    entity_id: !input gate
          - if:
              - condition: template
                value_template: !input opening_notification
            then:
                # Notify the user that the gate is opening automatically
                - service: "{{ notify_device }}"
                  data:
                    title: !input gate_opening_title
                    message: !input automatic_opening_message
                    data:
                      car_ui: true
                      notification_icon: mdi:gate-open
                      channel: Gate alerts
                      importance: high
                      push:
                        sound:
                          name: "default"
                          critical: 1
                      tag: gate-movement
                      timeout: 300
      # If automatic closing is enabled
      - if:
          - condition: template
            value_template: "{{ automatic_closing == 'on' }}"
        then:
          # Wait for the gate to be closed by the user, or the iBeacon to be out of reach for 20s, or the vehicle to be left, or the user to leave, all while not waiting more than the auto-close delay
          - wait_for_trigger:
              - platform: template
                id: manual
                value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
              - platform: template
                id: ble
                value_template: "{{ (ble_entities | length) - 1 >= idx and is_state(ble_entities[idx], 'unknown') }}"
              - platform: template
                id: vehicle_left
                value_template: "{{ is_state(driving_sensor, 'off') }}"
              - platform: template
                id: gate_zone_left
                value_template: "{{ not is_state(person, [state_attr(gate_location, 'friendly_name'), states[gate_location].object_id]) }}"
            timeout:
              minutes: !input safety_delay
          # Remove the current itinerary since the user has either left or took too long
          - service: input_text.set_value
            target:
              entity_id: "{{ itinerary_sensor }}"
            data:
              value: none
          # If iBeacon automatic closing is enabled for this user and ble_transmitter_phone_control is turned on
          - if:
              - condition: template
                value_template: "{{ (ble_entities | length) - 1 >= idx and ble_transmitter_phone_control }}"
            then:
              # Deactivate the BLE transmitter on user's phone
              - service: "{{ notify_device }}"
                data:
                  message: command_ble_transmitter
                  data:
                    command: turn_off
          # If the gate has been closed manually
          - if:
              - condition: template
                value_template: "{{ wait.trigger.id == 'manual' }}"
            then:
              # If the iBeacon scanner is only managed by this automation, and doesn't need to stay on
              - if:
                - condition: template
                  value_template: "{{ ble_scanner_switch != '' }}"
                then:
                  # Deactivate the BLE scanner from the ESP32 connected to the gate (optional)
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ ble_scanner_switch }}"
            else:
              # If no one else is currently leaving
              - if:
                  - condition: not
                    conditions:
                      - condition: template
                        value_template: "{{ driving_sensors | select('is_state', 'leaving') | list != [] }}"
                then:
                  # If the iBeacon scanner is only managed by this automation, and doesn't need to stay on
                  - if:
                    - condition: template
                      value_template: "{{ ble_scanner_switch != '' }}"
                    then:
                      # Deactivate the BLE scanner from the ESP32 connected to the gate (optional)
                      - service: switch.turn_off
                        target:
                          entity_id: "{{ ble_scanner_switch }}"
                  # If no one else is currently approaching
                  - if:
                      - condition: not
                        conditions:
                          - condition: template
                            value_template: "{{ driving_sensors | select('is_state', 'on_approach') | list != [] }}"
                    then:
                      # If the timeout was reached
                      - if:
                          - condition: template
                            value_template: "{{ wait.remaining == 0 }}"
                        then:
                          # Notify the user that the gate will close automatically since he didn't leave in time
                          - service: "{{ notify_device }}"
                            data:
                              title: !input gate_closing_title
                              message: !input did_not_leave_message
                              data:
                                car_ui: true
                                notification_icon: mdi:alert-circle
                                channel: Gate alerts
                                importance: high
                                push:
                                  sound:
                                    name: "default"
                                    critical: 1
                                tag: gate-movement
                                timeout: 300
                        else:
                          # Notify the user that the gate will close automatically
                          - service: "{{ notify_device }}"
                            data:
                              message: !input automatic_closing_message
                              data:
                                car_ui: true
                                notification_icon: mdi:gate
                                channel: Gate alerts
                                importance: high
                                push:
                                  sound:
                                    name: "default"
                                    critical: 1
                                tag: gate-movement
                                timeout: 300
                      # Close the gate
                      - choose:
                        - conditions:
                            - condition: template
                              value_template: "{{ states[gate].domain == 'switch' }}"
                          sequence:
                            - service: switch.turn_off
                              target:
                                entity_id: !input gate
                        - conditions:
                            - condition: template
                              value_template: "{{ states[gate].domain == 'cover' }}"
                          sequence:
                            - service: cover.close_cover
                              target:
                                entity_id: !input gate
                      - stop: Successful
              # Get the names of the persons being awaited
              - variables:
                  awaiting_persons: >-
                    {% set awaiting_sensors = itinerary_sensors | select('is_state', 'on_approach') | list +
                                              itinerary_sensors | select('is_state', 'leaving') | list %}
                    {% set data = namespace(awaiting_persons=[]) %}
                    {% for i in range(awaiting_sensors|length) %}
                    {% set data.awaiting_persons = data.awaiting_persons + [state_attr(persons[i], 'friendly_name')] %}
                    {% endfor %}
                    {{ data.awaiting_persons | join(', ') }}
              # Notify the user that the gate will wait for next person
              - service: "{{ notify_device }}"
                data:
                  title: !input awaiting_title
                  message: !input awaiting_message
                  data:
                    car_ui: true
                    notification_icon: mdi:sleep
                    channel: Gate alerts
                    importance: high
                    push:
                      sound:
                        name: "default"
                        critical: 1
                    tag: itinerary-status
              # Wait for the gate to be closed
              - wait_for_trigger:
                  - platform: template
                    value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
              # Remove the notification received by the user when the gate was awaiting another user
              - service: "{{ notify_device }}"
                data:
                  message: clear_notification
                  data:
                    tag: itinerary-status
              # Remove the notification received by the user when his gate was opening
              - if:
                  condition: template
                  value_template: !input opening_notification
                then:
                  - service: "{{ notify_device }}"
                    data:
                      message: clear_notification
                      data:
                        tag: gate-movement
        # If automatic closing is disabled
        else:
          # Wait for the user to leave
          - wait_for_trigger:
              - platform: template
                id: gate_zone_left
                value_template: "{{ not is_state(person, [state_attr(gate_location, 'friendly_name'), states[gate_location].object_id]) }}"
          # Remove the current itinerary
          - service: input_text.set_value
            target:
              entity_id: "{{ itinerary_sensor }}"
            data:
              value: none

    ###################
    # START ITINERARY #
    ###################

    # If the user is currently away from the gate location
    else:
      # Set the user itinerary text variable to "arriving"
      - service: input_text.set_value
        target:
          entity_id: "{{ itinerary_sensor }}"
        data:
          value: arriving
      # Notify the user that his itinerary has been started
      - service: "{{ notify_device }}"
        data:
          title: !input itinerary_update_title
          message: !input itinerary_started_message
          data:
            car_ui: true
            notification_icon: mdi:map-check
            channel: Itinerary status
            importance: high
            push:
              sound:
                name: "default"
                critical: 1
            tag: itinerary-status
      # If the travel time refresh rate is set to "Continuously"
      - if:
          - condition: template
            value_template:  "{{ travel_time_rate == 'Continuously' }}"
        # Then update the user travel time once to display an approximation on the dashboard (while taking into account the time elapsed
        then:
          - service: homeassistant.update_entity
            target:
              entity_id: "{{ travel_time_sensor }}"
      # Repeat while the user is driving
      - repeat:
          while:
            - condition: template
              value_template: "{{ is_state(driving_sensor, 'on') }}"
          sequence:
            # If the travel time has expired and its refresh rate is set to "Continuously"
            - if:
                - condition: template
                  value_template:  "{{ travel_time_rate == 'Continuously' and
                    states[travel_time_sensor].last_updated + timedelta(minutes=1) < now() }}"
              # Then refresh the travel time to display a precise value on the dashboard
              then:
                - service: homeassistant.update_entity
                  target:
                    entity_id: "{{ travel_time_sensor }}"
            # Wait for a user position update or a deactivation of his driving sensor
            - wait_for_trigger:
                - platform: event
                  event_type: state_changed
                  event_data:
                    entity_id: "{{ person }}"
                - platform: template
                  value_template: "{{ is_state(driving_sensor, 'off') }}"
            # Repeat while the user is nearer than 1km of radius from the gate and is still driving
            # This allows to update to a precise ETA even if a traffic jam appears near your gate
            # It will return to the previous loop if the user has entered the radius but passed by and didn't go directly to your gate zone
            - repeat:
                while:
                  - condition: template
                    value_template: "{{ states(proximity_sensors[idx]) | int < eta_zone }}"
                  - condition: template
                    value_template: "{{ is_state(driving_sensor, 'on') }}"
                sequence:
                  # Update the user travel time when there is a new position
                  - service: homeassistant.update_entity
                    target:
                      entity_id: "{{ travel_time_sensor }}"
                  # Verify that your integration has responded with a new travel time
                  - condition: template
                    value_template: "{{ states[travel_time_sensor].last_updated > now() - timedelta(seconds=5) }}"
                  # Calculate his Estimated Time of Arrival
                  - service: input_datetime.set_datetime
                    target:
                      entity_id: !input eta_sensor
                    data:
                      datetime: >
                        {{ (as_timestamp(now()) +
                        (state_attr(travel_time_sensor, 'duration') *
                        60) - lead_time) | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
                  # If the ETA is in the future
                  - if:
                      - condition: template
                        value_template: "{{ state_attr(eta_sensor, 'timestamp') > as_timestamp(now()) }}"
                    then:
                      # If the travel time refresh rate is set to "Once when near home"
                      - if:
                          - condition: template
                            value_template: "{{ travel_time_rate == 'Once when near home' }}"
                        # Then wait for ETA or car left
                        then:
                          - wait_for_trigger:
                              - platform: time
                                at: !input eta_sensor
                              - platform: template
                                value_template: "{{ is_state(driving_sensor, 'off') }}"
                        # If the travel time refresh rate is set to "Continuously" or "While near home"
                        else:
                          # Wait for ETA or new position or car left, and cancel if it hasn't been updated for too long (e.g: if device offline)
                          - wait_for_trigger:
                              - platform: event
                                event_type: state_changed
                                event_data:
                                  entity_id: "{{ person }}"
                              - platform: time
                                at: !input eta_sensor
                              - platform: template
                                value_template: "{{ is_state(driving_sensor, 'off') }}"
                            timeout:
                              minutes: !input timeout_delay
                          # If the timeout ran out of time
                          - if:
                              - condition: template
                                value_template: "{{ wait.remaining == 0 }}"
                            then:
                              # Remove the current itinerary since the user has timed out
                              - service: input_text.set_value
                                target:
                                  entity_id: "{{ itinerary_sensor }}"
                                data:
                                  value: none
                              # Notify the user that his itinerary has been canceled
                              - service: "{{ notify_device }}"
                                data:
                                  title: !input itinerary_canceled_title
                                  message: !input timed_out_message
                                  data:
                                    car_ui: true
                                    notification_icon: mdi:alert-circle
                                    channel: Itinerary status
                                    importance: high
                                    push:
                                      sound:
                                        name: "default"
                                        critical: 1
                                    tag: itinerary-status
                                    timeout: 300
                              - stop: Timed out

                  # Restart the second repeat loop if the wait_for_trigger was triggered by a position or car sensor update
                  # This allows the loop to refresh the ETA with a new position or stop the script if the car was left
                  # This is quite a redundant condition as it has already been checked above, if you find a better way to restart the loop, feel free to make a PR
                  - condition: template
                    value_template: "{{ state_attr(eta_sensor, 'timestamp') <= as_timestamp(now()) }}"
                  - if:
                      # The user is not in the activation zone
                      - condition: template
                        value_template: "{{ states(proximity_sensors[idx]) | int > activation_zone }}"
                    then:
                      # Remove the current itinerary since the user was not in the activation zone when the gate tried to open
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ itinerary_sensor }}"
                        data:
                          value: none
                      # Notify the user that his itinerary has been canceled
                      - service: "{{ notify_device }}"
                        data:
                          title: !input itinerary_canceled_title
                          message: !input vehicle_away_message
                          data:
                            car_ui: true
                            notification_icon: mdi:alert-circle
                            channel: Itinerary status
                            importance: high
                            push:
                              sound:
                                name: "default"
                                critical: 1
                            tag: itinerary-status
                            timeout: 300
                      - stop: Not in activation zone
                  # Set the user itinerary text variable to "on_approach", because the user is near the gate and will arrive soon
                  - service: input_text.set_value
                    data:
                      value: on_approach
                    target:
                      entity_id: "{{ itinerary_sensor }}"
                  # If the gate is closing/closed
                  - if:
                      - condition: template
                        value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
                    # Then open it
                    then:
                      # Select the right service by checking the first letter of the gate id
                      - choose:
                        - conditions:
                            - condition: template
                              value_template: "{{ states[gate].domain == 'switch' }}"
                          sequence:
                            - service: switch.turn_on
                              target:
                                entity_id: !input gate
                        - conditions:
                            - condition: template
                              value_template: "{{ states[gate].domain == 'cover' }}"
                          sequence:
                            - service: cover.open_cover
                              target:
                                entity_id: !input gate
                      - if:
                          - condition: template
                            value_template: !input opening_notification
                        then:
                            # Notify the user that the gate is opening automatically
                            - service: "{{ notify_device }}"
                              data:
                                title: !input gate_opening_title
                                message: !input automatic_opening_message
                                data:
                                  car_ui: true
                                  notification_icon: mdi:gate-open
                                  channel: Gate alerts
                                  importance: high
                                  push:
                                    sound:
                                      name: "default"
                                      critical: 1
                                  tag: gate-movement
                                  timeout: 300
                  # If automatic closing is not fully disabled
                  - if:
                      - condition: template
                        value_template: "{{ automatic_closing != 'off' }}"
                    then:
                      # Wait for the gate to be closed manually, or the vehicle to be left, or the user to leave the activation zone, all while not waiting more than the auto-close delay
                      - wait_for_trigger:
                          - platform: template
                            id: manual
                            value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
                          - platform: template
                            id: vehicle_left
                            value_template: "{{ is_state(driving_sensor, 'off') }}"
                          - platform: template
                            id: activation_zone_left
                            value_template: "{{ states(proximity_sensors[idx]) | int > activation_zone }}"
                        timeout:
                          minutes: !input safety_delay
                      # Remove the current itinerary since the user has either arrived or took too long
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ itinerary_sensor }}"
                        data:
                          value: none
                      # If the gate has been closed manually
                      - if:
                          - condition: template
                            value_template: "{{ wait.trigger.id == 'manual' }}"
                        then:
                          # Remove the notification received by the user when his itinerary was started
                          - service: "{{ notify_device }}"
                            data:
                              message: clear_notification
                              data:
                                tag: itinerary-status
                        else:
                          # If someone is currently approaching or leaving
                          - if:
                              - condition: or
                                conditions:
                                - condition: template
                                  value_template: "{{ driving_sensors | select('is_state', 'on_approach') | list != [] }}"
                                - condition: template
                                  value_template: "{{ driving_sensors | select('is_state', 'leaving') | list != [] }}"
                            then:
                              # Get the names of the persons being awaited
                              - variables:
                                  awaiting_persons: >-
                                    {% set awaiting_sensors = itinerary_sensors | select('is_state', 'on_approach') | list +
                                                              itinerary_sensors | select('is_state', 'leaving') | list %}
                                    {% set data = namespace(awaiting_persons=[]) %}
                                    {% for i in range(awaiting_sensors|length) %}
                                    {% set data.awaiting_persons = data.awaiting_persons + [state_attr(persons[i], 'friendly_name')] %}
                                    {% endfor %}
                                    {{ data.awaiting_persons | join(', ') }}
                              # Notify the user that the gate will wait for next person
                              - service: "{{ notify_device }}"
                                data:
                                  title: !input awaiting_title
                                  message: !input awaiting_message
                                  data:
                                    car_ui: true
                                    notification_icon: mdi:sleep
                                    channel: Itinerary status
                                    importance: high
                                    push:
                                      sound:
                                        name: "default"
                                        critical: 1
                                    tag: itinerary-status
                              # Wait for the gate to be closed
                              - wait_for_trigger:
                                  - platform: template
                                    value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
                            # If no one is currently approaching or leaving
                            else:
                              - choose:
                                  # If the timeout was reached
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ wait.remaining == 0 }}"
                                    sequence:
                                      # Notify the user that the gate will close automatically since he took too long
                                      - service: "{{ notify_device }}"
                                        data:
                                          title: !input gate_closing_title
                                          message: !input did_not_arrive_message
                                          data:
                                            car_ui: true
                                            notification_icon: mdi:alert-circle
                                            channel: Gate alerts
                                            importance: high
                                            push:
                                              sound:
                                                name: "default"
                                                critical: 1
                                            tag: gate-movement
                                            timeout: 300
                                  # If the user has exited the gate activation zone
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ wait.trigger.id == 'activation_zone_left' }}"
                                    sequence:
                                      # Notify the user that the gate will close automatically since he has exited the zone
                                      - service: "{{ notify_device }}"
                                        data:
                                          title: !input gate_closing_title
                                          message: !input vehicle_away_message
                                          data:
                                            car_ui: true
                                            notification_icon: mdi:alert-circle
                                            channel: Gate alerts
                                            importance: high
                                            push:
                                              sound:
                                                name: "default"
                                                critical: 1
                                            tag: gate-movement
                                            timeout: 300
                                  # If the user has stopped his car, arrived, and auto-closing is enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ wait.trigger.id == 'vehicle_left' and
                                                            is_state(person, [state_attr(gate_location, 'friendly_name'), states[gate_location].object_id]) and
                                                            automatic_closing == 'on' }}"
                                    sequence:
                                      # Notify the user that the gate will close automatically since he has arrived
                                      - service: "{{ notify_device }}"
                                        data:
                                          title: !input gate_closing_title
                                          message: !input user_arrival_message
                                          data:
                                            car_ui: true
                                            notification_icon: mdi:flag-checkered
                                            channel: Gate alerts
                                            importance: high
                                            push:
                                              sound:
                                                name: "default"
                                                critical: 1
                                            tag: gate-movement
                                            timeout: 300
                                      - delay:
                                          minutes: !input auto_close_arrival_delay
                                  # If the user has left his car
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ wait.trigger.id == 'vehicle_left' }}"
                                    sequence:
                                      # Notify the user that the gate will close automatically since he has left his car
                                      - service: "{{ notify_device }}"
                                        data:
                                          title: !input gate_closing_title
                                          message: !input vehicle_left_message
                                          data:
                                            car_ui: true
                                            notification_icon: mdi:alert-circle
                                            channel: Gate alerts
                                            importance: high
                                            push:
                                              sound:
                                                name: "default"
                                                critical: 1
                                            tag: gate-movement
                                            timeout: 300
                                # If the user has arrived but don't have automatic gate enabled
                                default:
                                  # Remove the notification received by the user when his itinerary was started
                                  - service: "{{ notify_device }}"
                                    data:
                                      message: clear_notification
                                      data:
                                        tag: itinerary-status
                                  # Stop the whole script as it was successful
                                  - stop: Successful
                              # Close the gate
                              - choose:
                                - conditions:
                                    - condition: template
                                      value_template: "{{ states[gate].domain == 'switch' }}"
                                  sequence:
                                    - service: switch.turn_off
                                      target:
                                        entity_id: !input gate
                                - conditions:
                                    - condition: template
                                      value_template: "{{ states[gate].domain == 'cover' }}"
                                  sequence:
                                    - service: cover.close_cover
                                      target:
                                        entity_id: !input gate
                      # Remove the notification received by the user when his itinerary was started or awaiting next user
                      - service: "{{ notify_device }}"
                        data:
                          message: clear_notification
                          data:
                            tag: itinerary-status
                      # Stop the whole script as it was successful
                      - stop: Successful
                    # If automatic closing is disabled
                    else:
                      # Wait for the user to stop his car
                      - wait_for_trigger:
                        - platform: template
                          value_template: "{{ is_state(driving_sensor, 'off') }}"
                      # Remove the current itinerary
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ itinerary_sensor }}"
                        data:
                          value: none
                      # Remove the notification received by the user when his itinerary was started
                      - service: "{{ notify_device }}"
                        data:
                          message: clear_notification
                          data:
                            tag: itinerary-status
                      # Remove the notification received by the user when his gate was opening
                      - if:
                          condition: template
                          value_template: !input opening_notification
                        then:
                          - service: "{{ notify_device }}"
                            data:
                              message: clear_notification
                              data:
                                tag: gate-movement
                      # Stop the whole script as it ran successfully
                      - stop: Successful
      # If both loop were broken
      # Remove the current itinerary since the user has left his vehicle or timed out
      - service: input_text.set_value
        data:
          value: none
        target:
          entity_id: "{{ itinerary_sensor }}"
      # If the car has been left in the gate zone and the travel time was not updated during the itinerary
      - if:
          condition: template
          value_template: "{{ is_state(person, [state_attr(gate_location, 'friendly_name'), states[gate_location].object_id])
            and states[travel_time_sensor].last_updated < now() - timedelta(minutes=5) }}"
        then:
          # Notify the user that his travel time integration did not respond during the itinerary
          - service: "{{ notify_device }}"
            data:
              title: !input itinerary_canceled_title
              message: !input travel_time_did_not_respond
              data:
                car_ui: true
                notification_icon: mdi:alert-circle
                channel: Itinerary status
                importance: high
                push:
                  sound:
                    name: "default"
                    critical: 1
                tag: itinerary-status
                timeout: 300
        else:
          # Notify the user that his itinerary has been canceled because he has left his car
          - service: "{{ notify_device }}"
            data:
              title: !input itinerary_canceled_title
              message: !input vehicle_left_message
              data:
                car_ui: true
                notification_icon: mdi:alert-circle
                channel: Itinerary status
                importance: high
                push:
                  sound:
                    name: "default"
                    critical: 1
                tag: itinerary-status
                timeout: 300
# Run in parralel to let the automation start with multiple users driving simultaneously
mode: parallel
max: 10
