blueprint:
  name: Gate offline notification
  domain: automation
  author: etiennec78
  description: |-
    # Gate offline notification üåê

    ## Description üìù
    A blueprint that **notifies** selected users when the gate has been **unavailable** for a time set

    ## Key Features üåü
    * Companion app notification üîî
    * Dashboard persistent notification üì¢
    * Companion app TTS support üì≥
    * Speakers TTS support üîä
    * Adjustable notifications üí¨

    ## More info ‚ÑπÔ∏è
    * Version : 1.1.0
    * Set up sensors : [click here](https://github.com/etiennec78/Home-Automation/blob/master/Automatic%20Gate/sensors.md)
    * Github : [click here](https://github.com/etiennec78/Home-Automation/tree/master/Automatic%20Gate/Extra/Automations)
    * Discord : etiennec78
    [!["Buy Me A Coffee"](https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png)](https://www.buymeacoffee.com/etiennec78)
  homeassistant:
    min_version: 2024.10.0
  input:
    gate:
      name: ‚õ©Ô∏è Gate
      description: The **switch** or **cover** which controls your **gate**
      selector:
        entity:
          filter:
            domain:
              - switch
              - cover
    offline_delay:
      name: ‚åõ Offline delay
      description: |-
        The time the automation will **wait** before **notifying your devices** if your gate is **still offline**
        *Note : Useful to remove false-positives if your gate is far away from your wifi and could disconnect frequently*
      default: 3
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: minutes
    notify_devices:
      name: üí¨ Notify services
      description: |-
        Each **service** of **device to notify** (Find the service ids by going into [Developer tools > Services tab](https://my.home-assistant.io/redirect/developer_states) > searching for "notify.")
        *Note : Optional*
      default: []
      selector:
        text:
          multiple: true
          prefix: notify.mobile_app_
    persistent_notification:
      name: üîî Persistent notification
      description: Be notified by a **[persistent notification](https://www.home-assistant.io/integrations/persistent_notification)** directly on the **frontend**
      default: false
      selector:
        boolean:
    phone_tts:
      name: üì≥ Phone TTS
      description: Let your **phones** read the **notification on speaker** when received
      default: false
      selector:
        boolean:
    speaker_tts_devices:
      name: üîä TTS speakers
      description: |-
        The **home speakers** your want to play a TTS on
        *Note : Optional*
      default: []
      selector:
        entity:
          multiple: true
          domain: media_player
    speaker_tts_service:
      name: üéôÔ∏è TTS service
      description: |-
        The **TTS service** you want to use for your speakers
        *Note : Optional*
      default: ""
      selector:
        target:
          entity:
            domain: tts
    offline_title:
      name: üìÉ Gate offline notification title
      description: The **title** displayed on the notification you will receive when your gate is **offline**
      default: "Gate offline üåê"
      selector:
        text:
    offline_message:
      name: üí¨ Gate offline notification
      description: |-
        The **content** of the notification you will receive when your gate is **offline**
        *Note : {{offline_delay}} will be replaced by the offline delay set above*
      default: "Gate offline for {{ offline_delay }} minutes"
      selector:
        text:

variables:
  gate: !input gate
  offline_delay: !input offline_delay
  persistent_notification: !input persistent_notification
  speaker_tts_devices: !input speaker_tts_devices
  speaker_tts_service: !input speaker_tts_service

triggers:
  # Triggers when the gate becomes unavailable for too long
  - trigger: state
    entity_id: !input gate
    to: unavailable
    for:
      minutes: !input offline_delay

conditions: []
  # No condition

actions:
  # Notify each user that the gate is offline
  - repeat:
      for_each: !input notify_devices
      sequence:
        - action: "{{ 'notify.mobile_app_'+repeat.item }}"
          data:
            message: !input offline_message
            title: !input offline_title
            data:
              car_ui: true
              notification_icon: mdi:gate-alert
              channel: Gate alerts
              importance: high
              push:
                sound:
                  name: "default"
                  critical: 1
              tag: gate-offline
              timeout: 3600
        # Play a TTS on each phone, only if this has been enabled
        - if:
            condition: template
            value_template: !input phone_tts
          then:
            - action: "{{ 'notify.mobile_app_'+repeat.item }}"
              data:
                message: TTS
                data:
                  tts_text: !input offline_message
  # Play a TTS on each speaker selected, only if at least one has been selected
  - repeat:
      for_each: "{{ speaker_tts_devices }}"
      sequence:
        - action: tts.speak
          data:
            cache: true
            media_player_entity_id: "{{ repeat.item }}"
            message: !input offline_message
          target: "{{ speaker_tts_service }}"
  # Send a persistent notification on the dashboard, only if this has been enabled
  - if:
      condition: template
      value_template: !input persistent_notification
    then:
      - action: persistent_notification.create
        data:
          message: !input offline_message
          title: !input offline_title
          notification_id: gate-offline
  # Wait for the gate to be back online, while running this automation for at most one hour
  - wait_for_trigger:
    - platform: template
      value_template: "{{ is_state(gate, ['off', 'closed', 'closing']) }}"
    timeout:
      hours: 1
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  # Remove the notification sent to the users
  - repeat:
      for_each: !input notify_devices
      sequence:
        - action: "{{ 'notify.mobile_app_'+repeat.item }}"
          data:
            message: clear_notification
            data:
              tag: gate-offline
  # Remove the persistent notification from the dashboard
  - if:
      condition: template
      value_template: !input persistent_notification
    then:
      - action: persistent_notification.dismiss
        data:
          notification_id: gate-offline
mode: single
