esphome:
  name: gate
  platform: esp32
  board: esp32dev #ESP32-WROOM-32E (version printed on the chip)

  on_boot:
    priority: 0
    then:
        # Initialise sensors
        - text_sensor.template.publish:
            id: gate_status
            state: "closed"
        - binary_sensor.template.publish:
            id: error
            state: OFF
        - text_sensor.template.publish:
            id: error_message
            state: ""

# Enable logging
logger:
  level: WARN # Change to DEBUG if needed

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_password

# Enable wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.69
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Enable iBeacon scanner
esp32_ble_tracker:
  scan_parameters:
    continuous: false

sensor:
  # Sensors for android auto, nearest distance of any device from home, state of the gate, and variables
  - platform: homeassistant
    id: nearest_distance
    entity_id: !secret nearest_distance_sensor
  - platform: duty_time
    id: elapsed_time
    disabled_by_default: true
  - platform: ble_rssi
    name: !secret ibeacon_user0_name
    ibeacon_uuid: !secret ibeacon_user0_uuid
    filters:
      - timeout: 25s
  - platform: ble_rssi
    name: !secret ibeacon_user1_name
    ibeacon_uuid: !secret ibeacon_user1_uuid
    filters:
      - timeout: 25s
  - platform: ble_rssi
    name: !secret ibeacon_user2_name
    ibeacon_uuid: !secret ibeacon_user2_uuid
    filters:
      - timeout: 25s

text_sensor:
  # Declare text sensors
  - platform: template
    id: gate_status
    name: "Gate status"
    icon: "mdi:information"
  - platform: template
    id: error_message
    name: "Error message"
    icon: "mdi:chat-alert"

  # Optional device trackers to let devices open the gate if they're connected to home wifi but aren't reporting their position
  # - platform: homeassistant
  #   id: device_tracker_1
  #   entity_id: !secret device_tracker_1_id
  # - platform: homeassistant
  #   id: device_tracker_2
  #   entity_id: !secret device_tracker_2_id

binary_sensor:
  # Declare binary sensors
  - platform: template
    id: error
    name: "Error"
    icon: "mdi:alert-circle"
  - platform: template
    id: standby
    name: "Gate on standby"
    icon: "mdi:sleep"
    disabled_by_default: true

globals:
  # Initialise a global variable tracking gate moving time
  - id: sleep_time
    type: float
    restore_value: no
    initial_value: "0"


switch:
  # Hidden switch to activate the real relay connected to your gate
  - platform: gpio
    pin: 16
    id: gate_pulse
    restore_mode: ALWAYS_OFF
    on_turn_on:
    - delay: 1s
    - switch.turn_off: gate_pulse

  # Virtual switch which guesses the state of your gate
  - platform: template
    id: gate
    name: "Gate"
    icon: "mdi:gate"
    restore_mode: ALWAYS_OFF
    turn_on_action:
        - script.execute: open_gate
    turn_off_action:
        - script.execute: close_gate

  # Virtual switch to enable the internal iBeacon scanner
  - platform: template
    id: ibeacon_switch
    name: "iBeacon scanner activation switch"
    icon: "mdi:access-point"
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - esp32_ble_tracker.start_scan:
    turn_off_action:
      - esp32_ble_tracker.stop_scan:


script:
  - id: open_gate
    mode: parallel
    then:
        - if:
            # Check that the gate is ready to take new inputs (in case of a multiple opening requests received at the same time when lagging)
            condition:
                - binary_sensor.is_off: standby
            then:
                - binary_sensor.template.publish:
                    id: standby
                    state: ON
                - if:
                    # Check if a GPS device tracker is near home
                    condition:
                        - lambda: 'return id(nearest_distance).state < 1000;'
                        # Optional, only if you have set wifi device trackers (l.79)
                        # - lambda: |-
                        #     return id(nearest_distance).state < 1000
                        #         or id(device_tracker_1).state == "home"
                        #         or id(device_tracker_2).state == "home";
                    then:
                        - if:
                            condition:
                                - text_sensor.state:
                                    id: gate_status
                                    state: "closed"
                            then:
                                # Accept the opening request and change the switch state
                                - switch.template.publish:
                                    id: gate
                                    state: ON

                                - script.execute: notify_gate_opening

                                - text_sensor.template.publish:
                                    id: gate_status
                                    state: "opening"
                                # Start a timer for the time it will take to fully close the gate
                                - script.execute: set_timer
                            else:
                                - if:
                                    # If the gate is currently closing but is still in movement
                                    condition:
                                        - text_sensor.state:
                                            id: gate_status
                                            state: "closing"
                                    then:
                                        # Accept the opening request and change the switch state
                                        - switch.template.publish:
                                            id: gate
                                            state: ON

                                        - script.execute: notify_gate_opening

                                        # Send two delayed pulses to the gate to make it stop then open
                                        - text_sensor.template.publish:
                                            id: gate_status
                                            state: "paused"
                                        - switch.turn_on: gate_pulse

                                        - delay: 2s

                                        - text_sensor.template.publish:
                                            id: gate_status
                                            state: "opening"
                                        # Start a timer for the time it will take to fully close the gate
                                        - script.execute: set_timer
                                    else:
                                        - script.execute:
                                            id: set_error
                                            message: "wrong-state"
                    else:
                        - script.execute:
                            id: set_error
                            message: "nobody-near-home"
            else:
                - script.execute:
                    id: set_error
                    message: "not-ready"

  - id: notify_gate_opening
    mode: restart
    then:
        # Notify mobile devices that the gate is opening
        - homeassistant.service:
            service: notify.all_devices
            data:
                message: !secret opening_notification_message
                title: !secret opening_notification_title
            data_template:
                data: |
                    {{ '{"tag": "gate-movement", "car_ui": true, "notification_icon": "mdi:gate-open", "channel": "Gate alerts", "importance": "high"}' | from_json }}
        # Play a TTS on a speaker to notify that the gate is opening
        - homeassistant.service:
            service: tts.speak
            data:
                cache: "true"
                media_player_entity_id: !secret player_entity
                message: !secret opening_notification_message
                entity_id: tts.piper
        # Optional, starts a HA script when your gate opens
        # - homeassistant.service:
        #     service: !secret opening_script_name

  - id: close_gate
    mode: parallel
    then:
        - if:
            # Check that the gate is ready to take new inputs (in case of a multiple closing requests received at the same time when lagging)
            condition:
                - binary_sensor.is_off: standby
            then:
                - binary_sensor.template.publish:
                    id: standby
                    state: ON
                - if:
                    condition:
                        - text_sensor.state:
                            id: gate_status
                            state: "open"
                    then:
                        # Accept the closing request and change the switch state
                        - switch.template.publish:
                            id: gate
                            state: OFF
                        - text_sensor.template.publish:
                            id: gate_status
                            state: "closing"
                        # Start a timer for the time it will take to fully close the gate
                        - script.execute: set_timer
                    else:
                        - if:
                            # If the gate is currently opening but is still in movement
                            condition:
                                text_sensor.state:
                                    id: gate_status
                                    state: "opening"
                            then:
                                # Accept the closing request and change the switch state
                                - switch.template.publish:
                                    id: gate
                                    state: OFF

                                # Send two delayed pulses to the gate to make it stop then close
                                - text_sensor.template.publish:
                                    id: gate_status
                                    state: "paused"
                                - switch.turn_on: gate_pulse

                                - delay: 2s

                                - text_sensor.template.publish:
                                    id: gate_status
                                    state: "closing"
                                # Start a timer for the time it will take to fully close the gate
                                - script.execute: set_timer
                            else:
                                - script.execute:
                                    id: set_error
                                    message: "wrong-state"
            else:
                - script.execute:
                    id: set_error
                    message: "not-ready"

  - id: set_timer
    mode: restart
    then:
      # Get the time remaining of the latest timer
      - component.update: elapsed_time
      # Reset the timer if it has hit 0 or keep its current value
      - lambda: |-
          if (id(elapsed_time).state == 0) {
            id(sleep_time) = 42;
          } else {
            id(sleep_time) = id(elapsed_time).state;
          }
      # Send a pulse to the gate
      - switch.turn_on: gate_pulse
      - sensor.duty_time.start: elapsed_time
      - delay: 1s
      - binary_sensor.template.publish:
          id: standby
          state: OFF
      # Wait for the gate to finish moving
      - delay: !lambda "return (id(sleep_time)-1)*1000;"
      # Reset the timer
      - sensor.duty_time.stop: elapsed_time
      - sensor.duty_time.reset: elapsed_time
      # Update the gate state
      - if:
          condition:
              - text_sensor.state:
                  id: gate_status
                  state: "closing"
          then:
              - text_sensor.template.publish:
                  id: gate_status
                  state: "closed"
              - homeassistant.service:
                  service: notify.all_devices
                  data:
                      message: clear_notification
                  data_template:
                      data: |
                          {{ '{"tag": "gate-movement"}' | from_json }}
          else:
            - if:
                condition:
                    - text_sensor.state:
                        id: gate_status
                        state: "opening"
                then:
                    - text_sensor.template.publish:
                        id: gate_status
                        state: "open"
                else:
                    - script.execute:
                        id: set_error
                        message: "bad-moving-state"

  - id: set_error
    mode: restart
    parameters:
      message: string
    then:
        - binary_sensor.template.publish:
            id: standby
            state: OFF
        - binary_sensor.template.publish:
            id: error
            state: ON
        - text_sensor.template.publish:
            id: error_message
            state: !lambda return message;
        # Notify mobile devices that the gate couldn't move because of an error
        - homeassistant.service:
            service: notify.all_devices
            data:
                title: !secret error_title
                message: !lambda return message;
            data_template:
                data: |
                    {{ '{"tag": "gate-error", "car_ui": true, "notification_icon": "mdi:gate-open", "channel": "Gate alerts", "importance": "high"}' | from_json }}
        - delay: 5s
        - binary_sensor.template.publish:
            id: error
            state: OFF
        - text_sensor.template.publish:
            id: error_message
            state: ""
        # Clear the notification
        - homeassistant.service:
            service: notify.all_devices
            data:
                message: clear_notification
            data_template:
                data: |
                    {{ '{"tag": "gate-error"}' | from_json }}
